{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPi2KL+iHvknxgTcuidOI/Y"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#1.what is numpy\n","###numpy(numerical python) is a powerfull python library used for\n","###->working with array\n","###->Performing matheatical operation including\n","####:linear algebra(matrix operation,vector calcukation)\n","####:fourier transform(used in signal processing)\n","####:statistical and scientific computing"],"metadata":{"id":"Yvw4odOjh34P"}},{"cell_type":"markdown","source":["#1.History of numpy\n","###->created in 2005 by travis oliphant\n","###->open source and widely used in scientific computing,AI and ML\n","###->Built on Top of C and C++ amking it extremely fast compared to standard Python lists"],"metadata":{"id":"j8gsyj8HjC32"}},{"cell_type":"code","source":["#example\n","\n","import numpy as np\n","arr=np.array([1,2,3,4,5])\n","print(arr)\n","print(type(arr))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TT5pusaLkAJc","executionInfo":{"status":"ok","timestamp":1739269922841,"user_tz":480,"elapsed":100,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"b64d7ac7-cf1c-4c2e-e28d-f86d39cbf082"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 2 3 4 5]\n","<class 'numpy.ndarray'>\n"]}]},{"cell_type":"markdown","source":["#3.Why we use numpy\n","###->More speed and efficiency\n","#####:numpy array are up to 50X faster than python list\n","#####:it provide vectorized ope(processing multiple element at once)\n","#####:it use less memory and optimize CPU operation"],"metadata":{"id":"5YECoNOgk03d"}},{"cell_type":"markdown","source":["#4.Key feature\n","####->speed = faster computation tha python list\n","####->memory efficient= use less memory\n","####->support large datasets\n","####->supports matrix operation,statistic,algebra\n","####->interoperablity=work well with pandas,scipy,tensorFlow"],"metadata":{"id":"XV_O9ErMmYXT"}},{"cell_type":"markdown","source":["#5.Why numpy faster than list\n","####->python list store references to obj at diff memory location=slower access\n","####->numpy array store  data in single contiguous block of memory = Faster access"],"metadata":{"id":"-NDHWGVnnDRQ"}},{"cell_type":"markdown","source":["#FINAL CONCLUSION\n","#### it significantly uses less memory as cmpared to list in python"],"metadata":{"id":"HpwZX5-GotW5"}},{"cell_type":"markdown","source":["#Numpy's imp in datascience\n","###->used for data storage,processing and analysis\n","###->essential for ML,AI,DL(tensorFlow,PyTorch ,rely on Numpy)\n","###->work with large datasets & big data"],"metadata":{"id":"wb29H3Z8pYRD"}},{"cell_type":"code","source":["import numpy as np\n"," #Load data from csv\n"," data=np.loadt"],"metadata":{"id":"SCkocsZIqK05"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###arange() and linspace()\n","####->arange(start,stop,step)\n","####->linspace(start,stop,num)"],"metadata":{"id":"ZDgS3Fp5WWCF"}},{"cell_type":"code","source":["import numpy as np\n","ar=np.arange(2,10,2) #endpoint not included\n","print(ar)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gip9q36iWlkw","executionInfo":{"status":"ok","timestamp":1740122379211,"user_tz":480,"elapsed":57,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"8d4bde11-c7ae-4cc6-e127-086736c85cd0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2 4 6 8]\n"]}]},{"cell_type":"code","source":["ar=np.linspace(0,10,5,endpoint=False) #not included\n","print(ar)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XNtod_3pWrz-","executionInfo":{"status":"ok","timestamp":1740122515782,"user_tz":480,"elapsed":35,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"e10d4e45-2995-4149-9710-2fe79acb9547"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1.  2.8 4.6 6.4 8.2]\n"]}]},{"cell_type":"code","source":["ar=np.linspace(0,10,5)#endpoint included\n","print(ar)\n","#stepsize (10-0)/(5-1)=2.5   if endpoint included\n","#stepsize (10-0)/5=2  if endpoint not included"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sBYWkovdW6gm","executionInfo":{"status":"ok","timestamp":1740122582120,"user_tz":480,"elapsed":26,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"dd9ffbc7-f08f-40ea-9145-87f60a22d236"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 0.   2.5  5.   7.5 10. ]\n"]}]},{"cell_type":"code","source":["ar,step=np.linspace(1,10,10,retstep=True)#endpoint included\n","print(ar)\n","print(step) # retstep=give stepsize\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3kroOkGLYsEX","executionInfo":{"status":"ok","timestamp":1740122953193,"user_tz":480,"elapsed":33,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"57ed27a2-cadb-4154-bb7f-847ad0c23aa6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10.]\n","1.0\n"]}]},{"cell_type":"code","source":["arr,step=np.linspace(2.5,5.5,5,retstep=True)\n","print(arr)\n","print(step)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"59ArxJ3eaEVO","executionInfo":{"status":"ok","timestamp":1740123044341,"user_tz":480,"elapsed":69,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"06000a07-5e50-49b4-8a1c-70303e43cb8e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2.5  3.25 4.   4.75 5.5 ]\n","0.75\n"]}]},{"cell_type":"markdown","source":["###creating negative seq"],"metadata":{"id":"TFlZcPzQa8t9"}},{"cell_type":"code","source":["arr=np.linspace(-10,-2,5)\n","print(arr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sHKc0jSaane5","executionInfo":{"status":"ok","timestamp":1740123168433,"user_tz":480,"elapsed":47,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"85e4cead-5983-4efc-d180-9d48052cfec6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[-10.  -8.  -6.  -4.  -2.]\n"]}]},{"cell_type":"markdown","source":["#GENERATING RANDOM ARRAY\n","##-> random.rand(shape)\n","##->random,randn(shape)\n","##->random.randint(low,high,size)"],"metadata":{"id":"ebiW8b7zcrEs"}},{"cell_type":"code","source":["ar=np.random.rand(3,3) #btw 0 and 1\n","arr=np.random.randn(3,3) #from a normal distribution\n","arrr=np.random.randint(1,101,(2,3)) # in given range\n","print(ar)\n","print(arr)\n","print(arrr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pn4dQ_ZpdADU","executionInfo":{"status":"ok","timestamp":1740123848607,"user_tz":480,"elapsed":34,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"8479533a-34c0-4a15-8fba-9f0d0d16271c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.51853781 0.0251304  0.0651806 ]\n"," [0.17125349 0.52911521 0.77901464]\n"," [0.57928087 0.84884595 0.36287743]]\n","[[-0.91723138  1.10150148 -0.19822999]\n"," [-1.30799827 -1.09331588  2.0611747 ]\n"," [ 0.32660812 -1.81105509 -1.72240298]]\n","[[78 61  3]\n"," [59 88 41]]\n"]}]},{"cell_type":"markdown","source":["#1D array indexing"],"metadata":{"id":"5nZYJ7l2EP3p"}},{"cell_type":"code","source":["import numpy as np\n","arr=np.array([10,20,30,40,50])\n","print(arr[1])\n","print(arr[-4])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oX_46b9MET_b","executionInfo":{"status":"ok","timestamp":1740637354050,"user_tz":480,"elapsed":18,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"d0590523-4f1c-403e-c66a-8948b7308b6e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["20\n","20\n"]}]},{"cell_type":"markdown","source":["#2D array indexing"],"metadata":{"id":"TRQdSpNHEzcP"}},{"cell_type":"code","source":["arr2d=np.array(([1,2,3],[4,5,6],[7,8,9]))\n","print(arr2d)\n","print(arr2d[0,0])\n","print(arr2d[1,1])\n","print(arr2d[-1,-1])\n","print(arr2d[-2,-3])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A4oNrEf8EdQs","executionInfo":{"status":"ok","timestamp":1740637708721,"user_tz":480,"elapsed":45,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"a73e42ee-9e2a-4fac-b28e-eddae53645e2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1 2 3]\n"," [4 5 6]\n"," [7 8 9]]\n","1\n","5\n","9\n","4\n"]}]},{"cell_type":"markdown","source":["#3D array indexing"],"metadata":{"id":"PEkFACjNGkVY"}},{"cell_type":"code","source":["arr3d=np.array(([[1,2],[3,4]],[[4,5],[6,7]]))\n","print(arr3d)\n","print(arr3d[0,0,1])  # use [depth,row,columns]\n","print(arr3d[1,1,1])\n","print(arr3d[1,1,0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oEvN_WLdFBYW","executionInfo":{"status":"ok","timestamp":1740638137853,"user_tz":480,"elapsed":561,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"6c6c96e8-3d22-4bb0-a8ae-79bd832997ff"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[[1 2]\n","  [3 4]]\n","\n"," [[4 5]\n","  [6 7]]]\n","2\n","7\n","6\n"]}]},{"cell_type":"markdown","source":["#Slicing"],"metadata":{"id":"j-QYQTirHucx"}},{"cell_type":"markdown","source":["##1D array slicing"],"metadata":{"id":"YP_LfzvLHzBw"}},{"cell_type":"code","source":["import numpy as np\n","arr=np.array([10,20,30,40,50])\n","print(arr[1:4])\n","print(arr[-4:-1])\n","print(arr[1:])\n","print(arr[:3])\n","print(arr[::-1])  #reverse\n","print(arr[::2])   #every second element\n","#[start,end,step]\n","#[by deafault 0 ,default end is last,default step is 1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vfB2XYJvH1V7","executionInfo":{"status":"ok","timestamp":1740638377496,"user_tz":480,"elapsed":43,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"e75c8d99-0e2d-4517-fc42-a83c59ddaa08"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[20 30 40]\n","[20 30 40]\n","[20 30 40 50]\n","[10 20 30]\n","[50 40 30 20 10]\n","[10 30 50]\n"]}]},{"cell_type":"markdown","source":["##2D array slicing"],"metadata":{"id":"GNrAC-NIIiH8"}},{"cell_type":"code","source":["arr2d=np.array(([1,2,3],[4,5,6],[7,8,9]))\n","print(arr2d[0:2,1:3])  #[row_start:row_end,col_start:col_end]\n","print(arr2d[1:3,1:3])\n","print(arr2d[0:2,0:2])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"baF3hUbuG1LY","executionInfo":{"status":"ok","timestamp":1740639085180,"user_tz":480,"elapsed":16,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"9c7dfc75-7a1f-4f08-ed20-3adf9977bfbf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[2 3]\n"," [5 6]]\n","[[5 6]\n"," [8 9]]\n","[[1 2]\n"," [4 5]]\n"]}]},{"cell_type":"markdown","source":["#->fancy indexing"],"metadata":{"id":"Ltk71L11MwKF"}},{"cell_type":"code","source":["import numpy as np\n","arr=np.array([10,20,30,40,50])\n","print(arr[[0,2,4]])  #[start,step,end]  end include bcoz we define index number and use indexing"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wvVkcyJ3JlfW","executionInfo":{"status":"ok","timestamp":1740639601582,"user_tz":480,"elapsed":42,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"b760e305-b148-4863-f864-715b696541b6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[10 30 50]\n"]}]},{"cell_type":"markdown","source":["#->Boolean indexing"],"metadata":{"id":"KRX4T1BKNlH1"}},{"cell_type":"code","source":["import numpy as np\n","arr=np.array([10,20,30,40,50])\n","print(arr[arr>25])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dFGvAZMRM824","executionInfo":{"status":"ok","timestamp":1740639758330,"user_tz":480,"elapsed":47,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"689ed6df-11d7-4eb6-ddf7-b45b5975adf7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[30 40 50]\n"]}]},{"cell_type":"markdown","source":["#Manipulating Arrays"],"metadata":{"id":"sCHyIVQsNyMH"}},{"cell_type":"markdown","source":["###Reshaping array"],"metadata":{"id":"N6yN1qHUTxxT"}},{"cell_type":"code","source":["import numpy as np\n","arr=np.array([1,2,3,4,5,6])\n","arr=arr.reshape(2,3)\n","print(arr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dCtD0oOmTw1M","executionInfo":{"status":"ok","timestamp":1741161500600,"user_tz":480,"elapsed":24,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"b6fc953e-19aa-4494-e069-044ffb48aa1f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1 2 3]\n"," [4 5 6]]\n"]}]},{"cell_type":"markdown","source":["###Flattening array with ravel()"],"metadata":{"id":"mh1MtV9oVMxP"}},{"cell_type":"code","source":["print(arr.ravel())"],"metadata":{"id":"1BHFN9z5NuYA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1741161851254,"user_tz":480,"elapsed":20,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"f50092d5-daa5-4441-879a-0209002ead03"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 2 3 4 5 6]\n"]}]},{"cell_type":"markdown","source":["###Adding and Removing dimensions"],"metadata":{"id":"Ti3FvVQDWIb4"}},{"cell_type":"code","source":["arr=np.array([1,2,3,4,5,6,7,8,9,10])\n","print(arr[2:10,np.newaxis])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gKwhBoO9VWUs","executionInfo":{"status":"ok","timestamp":1741162219110,"user_tz":480,"elapsed":60,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"513360c4-b09a-4047-910f-a6edeaf69176"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 3]\n"," [ 4]\n"," [ 5]\n"," [ 6]\n"," [ 7]\n"," [ 8]\n"," [ 9]\n"," [10]]\n"]}]},{"cell_type":"markdown","source":["###Stacking and splitting Arrays"],"metadata":{"id":"O7gF6GydW05J"}},{"cell_type":"code","source":["arr1=np.array([[1,2],[3,4]])\n","arr2=np.array([[5,6],[7,8]])\n","result=np.vstack((arr1,arr2))\n","print(\"Result Vertically:\\n\",result)\n","result=np.hstack((arr1,arr2))\n","print(\"Result Horizontally:\\n\",result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5iCCDCM2WUcn","executionInfo":{"status":"ok","timestamp":1741162332868,"user_tz":480,"elapsed":52,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"23d33c1a-1880-4118-e409-af1ed0a02cde"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Result Vertically:\n"," [[1 2]\n"," [3 4]\n"," [5 6]\n"," [7 8]]\n","Result Horizontally:\n"," [[1 2 5 6]\n"," [3 4 7 8]]\n"]}]},{"cell_type":"code","source":["ar1=np.array([1,2,3])\n","ar2=np.array([7,8,9])\n","ar3=np.array([4,5,6])\n","print(np.vstack((ar1,ar3,ar2)))\n","print(np.hstack((ar1,ar3,ar2)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o5FHjsdlXFvm","executionInfo":{"status":"ok","timestamp":1741163265492,"user_tz":480,"elapsed":71,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"dd2fefa7-1486-474b-d51d-09c13da14a0c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1 2 3]\n"," [4 5 6]\n"," [7 8 9]]\n","[1 2 3 4 5 6 7 8 9]\n"]}]},{"cell_type":"markdown","source":["###Array operation and broadcasting"],"metadata":{"id":"WjsVyfdlYQWh"}},{"cell_type":"markdown","source":["###1. Array operation"],"metadata":{"id":"lJ4s8FT_YcTY"}},{"cell_type":"code","source":["ar1=np.array([1,2,3])\n","ar2=np.array([4,5,6])\n","print(\"+ operator\\n\",ar1+ar2)\n","print(\"- operator\\n\",ar2-ar1)\n","print(\"* operator\\n\",ar1*ar2)\n","print(\"/ operator\\n\",ar1/ar2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w8tOmYeYXo4n","executionInfo":{"status":"ok","timestamp":1741162922740,"user_tz":480,"elapsed":15,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"8271e92f-802b-44ea-9e02-274ed606328f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+ operator\n"," [5 7 9]\n","- operator\n"," [3 3 3]\n","* operator\n"," [ 4 10 18]\n","/ operator\n"," [0.25 0.4  0.5 ]\n"]}]},{"cell_type":"markdown","source":["###Applying universal function"],"metadata":{"id":"QPADW5MRZfKO"}},{"cell_type":"code","source":["arr=np.array([1,4,9,16])\n","print(np.sqrt(arr))\n","print(np.exp(arr))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jR5dzjewYsQ7","executionInfo":{"status":"ok","timestamp":1741162999875,"user_tz":480,"elapsed":60,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"e191abc0-ad77-4b7d-bfe2-34a454ca02fc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1. 2. 3. 4.]\n","[2.71828183e+00 5.45981500e+01 8.10308393e+03 8.88611052e+06]\n"]}]},{"cell_type":"markdown","source":["###BROADCASTING = IT ALLOW NUMPY TO PERFOMN OPERATION BETWEEN ARRAY OF DIFFERENT DIMENSIONS\n","\n","####->Smaller ar2 is broadcasted to larger ar1"],"metadata":{"id":"bSkzivSLbjA0"}},{"cell_type":"code","source":["import numpy as np\n","ar1=np.array([[1,2,3],[1,1,1]])\n","ar2=np.array([4,5,6])\n","print(\"+ operator\\n\",ar1+ar2)\n","print(\"- operator\\n\",ar2-ar1)\n","print(\"* operator\\n\",ar1*ar2)\n","print(\"/ operator\\n\",ar1/ar2)\n","print(\"** operator\\n\",ar1**ar2)  #exponantial operator\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"btxp2aEAZu5a","executionInfo":{"status":"ok","timestamp":1741241804350,"user_tz":480,"elapsed":50,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"68d753fb-514a-4298-e437-b72ac168b4a9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+ operator\n"," [[5 7 9]\n"," [5 6 7]]\n","- operator\n"," [[3 3 3]\n"," [3 4 5]]\n","* operator\n"," [[ 4 10 18]\n"," [ 4  5  6]]\n","/ operator\n"," [[0.25       0.4        0.5       ]\n"," [0.25       0.2        0.16666667]]\n","** operator\n"," [[  1  32 729]\n"," [  1   1   1]]\n"]}]},{"cell_type":"markdown","source":["###Broadcasting scalar with array"],"metadata":{"id":"hkV7Sr2CdQ72"}},{"cell_type":"code","source":["arr=np.array([1,2,3])\n","print(arr+10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b4-ZWOgRa_iO","executionInfo":{"status":"ok","timestamp":1741163970805,"user_tz":480,"elapsed":22,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"429ed2e5-9086-4f16-d642-90bfb5859064"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[11 12 13]\n"]}]},{"cell_type":"markdown","source":["##Agregation Function"],"metadata":{"id":"89SKLxcbHAe1"}},{"cell_type":"code","source":["ar=np.array([1,2,3,4,5])\n","print(np.sum(ar))\n","print(np.average(ar))\n","print(np.prod(ar))\n","print(np.min(ar))\n","print(np.max(ar))\n","print(np.count_nonzero(ar))\n"],"metadata":{"id":"IoaEY2AGdb8m","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1741243837523,"user_tz":480,"elapsed":76,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"83db3940-e027-4229-f827-6026f9dd5500"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["15\n","3.0\n","120\n","1\n","5\n","5\n"]}]},{"cell_type":"markdown","source":["##Degree to Radian"],"metadata":{"id":"0nJlAxCBKJGD"}},{"cell_type":"code","source":["radian=np.radians([0,30,45,60,90])  #we convert degrees into radians\n","print(radian)\n","print(np.sin(radian))\n","print(np.cos(radian))\n","print(np.tan(radian))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tTWb80bUHMgl","executionInfo":{"status":"ok","timestamp":1741243211570,"user_tz":480,"elapsed":25,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"e25f97d7-d99a-493a-b793-ae17fe0b75ca"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.         0.52359878 0.78539816 1.04719755 1.57079633]\n","[0.         0.5        0.70710678 0.8660254  1.        ]\n","[1.00000000e+00 8.66025404e-01 7.07106781e-01 5.00000000e-01\n"," 6.12323400e-17]\n","[0.00000000e+00 5.77350269e-01 1.00000000e+00 1.73205081e+00\n"," 1.63312394e+16]\n"]}]},{"cell_type":"markdown","source":["##NATURAL LOG"],"metadata":{"id":"M9MQU0PsMgBf"}},{"cell_type":"code","source":[],"metadata":{"id":"oZnN9F5IKWPC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##Statistical function"],"metadata":{"id":"t2N26dj3N6H3"}},{"cell_type":"code","source":["import numpy as np\n","ar=np.array([10,20,30,40,50,60,70,80,90,100])\n","print(np.mean(ar))\n","print(np.median(ar))\n","print(np.std(ar))  #never less than 0 (if its value small so it is evenly/closely distributed toward mean )\n","print(np.var(ar))  #never less than 0 (if its value large so it is widely distributed from mean )\n","print(np.min(ar))\n","print(np.max(ar))\n","print(np.percentile(ar,25))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I2tiaZyqN8uW","executionInfo":{"status":"ok","timestamp":1741243844911,"user_tz":480,"elapsed":34,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"01ea7b81-2609-48ef-f758-b3001c4803c6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["55.0\n","55.0\n","28.722813232690143\n","825.0\n","10\n","100\n","32.5\n"]}]},{"cell_type":"markdown","source":["##percentile = it tell us how many value bellow a certain threshold"],"metadata":{"id":"DkQcyMdYdycH"}},{"cell_type":"code","source":["import numpy as np\n","data=np.array([10,20,30,40,50,60,70,80,90,100])\n","print(np.percentile(data,50))\n","print(np.percentile(data,90))"],"metadata":{"id":"5AU6tLFxOIc7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1741331988599,"user_tz":480,"elapsed":33,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"2e294b21-e4fd-4225-c48e-5b138c46064b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["55.0\n","91.0\n"]}]},{"cell_type":"markdown","source":["##Correlation Cofficient = Show relation btw two dataset"],"metadata":{"id":"T7iPKiRzeuYU"}},{"cell_type":"code","source":["x=np.array([1,2,3,4,5])\n","y=np.array([2,4,6,8,10])\n","correlation=np.corrcoef(x,y)\n","print(correlation)\n","#A Coffecient close to 1 indicate a strong positive correlation\n","#(0 to 1)so positive corelated\n","#(-1 to 0) negatice related"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ni6zSPQBeHaz","executionInfo":{"status":"ok","timestamp":1741332406849,"user_tz":480,"elapsed":59,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"d6759975-6fa5-4b78-e84f-a6b7a41a1232"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1. 1.]\n"," [1. 1.]]\n"]}]},{"cell_type":"markdown","source":["##Histogram\n","\n","###-> it is way of representing the freq distribution of numerical data\n","###-> range = max-min\n","###-> it devide entire range into intervals(Bins) and count how many value falls into each interval\n"],"metadata":{"id":"nrfdb6zrgoNi"}},{"cell_type":"code","source":["import numpy as np\n","data=np.array([10,20,30,40,50,60,70,80,90,100])\n","hist,bin = np.histogram(data,bins=5)  #it help in visualizing how data is distributed\n","print(\"Histogram:\",hist)\n","print(\"Bins:\",bin)  #no. of bar"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Kf1Zmd7af-B5","executionInfo":{"status":"ok","timestamp":1741332888675,"user_tz":480,"elapsed":34,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"12dac4a7-8f60-4a9d-dd1f-b90bd583283c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Histogram: [2 2 2 2 2]\n","Bins: [ 10.  28.  46.  64.  82. 100.]\n"]}]},{"cell_type":"code","source":["data2=np.array([45,47,50,55,60,62,65,68,70,75,78,80,82,85,90])\n","hist,bin = np.histogram(data2,bins=5) #devide data into five equal interval\n","print(\"Histogram:\",hist)  #hist give the count of value in each bin\n","print(\"Bins:\",bin)  #show range of each bin"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Tcsmmftxhzi-","executionInfo":{"status":"ok","timestamp":1741333482963,"user_tz":480,"elapsed":23,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"6b73f868-4df2-4981-97d1-1bca978146a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Histogram: [3 3 3 3 3]\n","Bins: [45. 54. 63. 72. 81. 90.]\n"]}]},{"cell_type":"markdown","source":["##plot histogram\n"],"metadata":{"id":"lVCSO0-mmAdm"}},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# Generate random data\n","data = np.random.randn(1000)  # 1000 random numbers from a normal distribution\n","\n","# Create histogram\n","plt.hist(data, bins=30, alpha=0.7, color='blue', edgecolor='black')\n","\n","# Labels and title\n","plt.xlabel('Value')\n","plt.ylabel('Frequency')\n","plt.title('Histogram of Random Data')\n","\n","# Show plot\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"JHHjJ1IZkEw3","executionInfo":{"status":"ok","timestamp":1741333914603,"user_tz":480,"elapsed":795,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"ab61de72-0458-4a8b-8f8b-6de433aaba8e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["##core linear Algebra Function"],"metadata":{"id":"tViaOALDmojY"}},{"cell_type":"markdown","source":["##-> DOT PRODUCT=it is sum of element-wise multiplication of two array"],"metadata":{"id":"PuupGRSFmtJ7"}},{"cell_type":"code","source":["a=np.array([1,2,3])\n","b=np.array([4,5,6])\n","print(np.dot(a,b))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QQeziW6xlt9C","executionInfo":{"status":"ok","timestamp":1741334256917,"user_tz":480,"elapsed":37,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"99d7fe2d-6c7c-44d6-b494-15a715a11bad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["32\n"]}]},{"cell_type":"markdown","source":["##->MATRIX MULTIPLICATION"],"metadata":{"id":"0R0SOGqTnDmQ"}},{"cell_type":"code","source":["A=np.array([[1,2],[3,4]])\n","B=np.array([[5,6],[7,8]])\n","print(np.matmul(A,B))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TT1Y6x8RnBtE","executionInfo":{"status":"ok","timestamp":1741334428089,"user_tz":480,"elapsed":55,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"f74b59f9-5ca5-4a46-d57f-0eb2f8efb13e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[19 22]\n"," [43 50]]\n"]}]},{"cell_type":"markdown","source":["##Transpose"],"metadata":{"id":"pEEe1NlNoTRM"}},{"cell_type":"code","source":["A=np.array([[1,2],[3,4]])\n","print(np.transpose(A))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gU8HqO8Qnrf1","executionInfo":{"status":"ok","timestamp":1741334585366,"user_tz":480,"elapsed":8,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"e4acdcf9-de57-4629-df50-bf9f848e74fe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1 3]\n"," [2 4]]\n"]}]},{"cell_type":"markdown","source":["##Inverse"],"metadata":{"id":"OruIZbzZo-v2"}},{"cell_type":"code","source":["A=np.array([[1,2],[3,4]])\n","print(np.linalg.inv(A))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"45ph5WbzoNNy","executionInfo":{"status":"ok","timestamp":1741334765733,"user_tz":480,"elapsed":17,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"81f1f36c-3bae-4982-c4f0-726c6248d0f0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[-2.   1. ]\n"," [ 1.5 -0.5]]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","A=np.array([[1,2],[3,4]])\n","print(np.linalg.det(A))\n"],"metadata":{"id":"GaXljHfao8UR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742197963118,"user_tz":480,"elapsed":28,"user":{"displayName":"Aditya Pal","userId":"00046789511702726164"}},"outputId":"963add1e-cab0-4b24-db00-052ae0d0eddf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-2.0000000000000004\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"9sKS91LsFt2M"},"execution_count":null,"outputs":[]}]}